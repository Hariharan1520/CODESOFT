import tkinter as tk
from tkinter import messagebox

class TodoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List")
        self.root.geometry("400x400")

        self.tasks = []

        self.background_color = "#d3d3d3"  

        self.frame = tk.Frame(self.root, bg=self.background_color)
        self.frame.pack(expand=True, fill='both')

        self.task_entry = tk.Entry(self.frame, bg="white")
        self.task_entry.pack(side=tk.TOP, fill=tk.X)

        self.add_button = tk.Button(self.frame, text="Add Task", command=self.add_task)
        self.add_button.pack(side=tk.TOP, pady=5)

        self.tasks_frame = tk.Frame(self.frame, bg=self.background_color)
        self.tasks_frame.pack(side=tk.TOP, expand=True, fill=tk.BOTH)

        self.update_tasks()

        self.root.config(bg=self.background_color)

    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.tasks.append(task)
            self.update_tasks()
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Task field cannot be empty!")

    def update_tasks(self):
        for widget in self.tasks_frame.winfo_children():
            widget.destroy()

        for i, task in enumerate(self.tasks):
            task_label = tk.Label(self.tasks_frame, text=task, bg=self.background_color)
            task_label.grid(row=i, column=0, sticky="nsew")

            done_button = tk.Button(self.tasks_frame, text="Done", command=lambda i=i: self.mark_done(i))
            done_button.grid(row=i, column=1)

            delete_button = tk.Button(self.tasks_frame, text="Delete", command=lambda i=i: self.delete_task(i))
            delete_button.grid(row=i, column=2)

    def mark_done(self, index):
        self.tasks.pop(index)
        self.update_tasks()

    def delete_task(self, index):
        response = messagebox.askyesno("Confirmation", "Are you sure you want to delete this task?")
        if response:
            self.tasks.pop(index)
            self.update_tasks()


if __name__ == "__main__":
    root = tk.Tk()
    todo_app = TodoListApp(root)
    root.mainloop()
